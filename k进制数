#include <stdio.h>
#include <stdlib.h>

#define MAX_N 16  // 最大N值
#define MAX_K 10  // 最大K值

// 递归计算有效数的数量
int count(int n, int last_digit, int last_last_digit, int k) {
    if (n == 0) {  // 基本情况: n为0, 表示已经处理完所有位数
        return 1;
    } else {  // 递归情况: 枚举当前位数上所有可能的数字
        int i, c = 0;
        for (i = 0; i < k; i++) {
            if (i != 0 || last_digit != 0 || last_last_digit != 0) {  // 排除包含两个连续0的数字
                c += count(n - 1, i, last_digit, k);  // 递归调用
            }
        }
        return c;
    }
}

// 动态规划计算有效数的数量
int count_dp(int n, int k) {
    int dp[MAX_N + 1][k];  // 动态规划数组
    int i, j, c = 0;

    // 初始化第一列
    for (i = 0; i < k; i++) {
        dp[1][i] = 1;
    }

    // 递推计算所有状态
    for (i = 2; i <= n; i++) {
        for (j = 0; j < k; j++) {
            if (j == 0) {  // 当前位是0的情况
                dp[i][j] = dp[i - 1][1];
            } else if (j == k - 1) {  // 当前位是k-1的情况
                dp[i][j] = dp[i - 1][k - 2];
            } else {  // 当前位是1到k-2的情况
                dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j + 1];
            }
        }
    }

    // 计算最后一列的总和
    for (i = 0; i < k; i++) {
        c += dp[n][i];
    }

    return c;
}

int main() {
    int n, k;

    // 读入n和k
    printf("请输入N和K的值: ");
    scanf("%d %d", &n, &k);

    // 使用递归计算有效数的数量
    printf("使用递归计算, N=%d, K=%d, 有效数的数量: %d\n", n, k, count(n, -1, -1, k));

    // 使用动态规划计算有效数的数量
    printf("使用动态规划计算, N=%d, K=%d, 有效数的数量: %d\n", n, k, count_dp(n, k));

    return 0;
}
