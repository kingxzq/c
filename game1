//game.h
#pragma once
#include<stdio.h>
#include<stdlib.h>
#include<time.h>
#define ROW 3
#define COL 3

void InitBoard(char board[ROW][COL]);
void DisplayBoard(char board[ROW][COL]);
void PlayerMove(char board[ROW][COL]);
void ComputerMove(char board[ROW][COL]);
char IsWin(char board[ROW][COL]);

//game.c
#define _CRT_SECURE_NO_WARNINGS 1
#include"game.h"
void InitBoard(char board[ROW][COL])
{
	int i = 0;
	for (i = 0; i < ROW; i++)
	{
		int j = 0;
		for (j = 0; j < COL; j++)
		{
			board[i][j] = ' ';
		}
	}
}
void DisplayBoard(char board[ROW][COL])
{
	int i = 0;
	for (i = 0; i < ROW; i++)
	{
		int j = 0;
		for (j = 0; j < COL; j++)
		{
			printf(" %c ", board[i][j]);
			if (j < ROW - 1)
				printf("|");
		}
		printf("\n");
		if(i < ROW - 1)
		{
			for (j = 0; j < COL; j++)
			{
				printf("---");
				if (j < COL - 1)
					printf("|");
			}
			printf("\n");
		}
	}
}
void PlayerMove(char board[ROW][COL])
{
	int x = 0, y = 0;
	printf("玩家下棋:>\n");
	while (1)
	{
		printf("请输入下棋坐标，中间用空格隔开:>");
		scanf("%d%d", &x, &y);
		if(x>=1&&x<=3&&y>=1&&y<=3)
		{
			if (board[x - 1][y - 1] == ' ')
			{
				board[x - 1][y - 1] = 'O';
				break;
			}
			else
				printf("此处被占用，请重新落子\n");
		}
		else
		{
			printf("坐标非法，请重新落子\n");
		}
	}
}
void ComputerMove(char board[ROW][COL])
{

	while (1)
	{
		int x = rand()%ROW, y = rand()%COL;
			if (board[x][y] == ' ')
			{
				board[x][y] = 'X';
				break;
			}
	}
}

int IsFull(char board[ROW][COL])
{
	int i = 0,j = 0;
	for (i = 0; i < ROW; i++)
	{
		for (j = 0; j < COL; j++)
		{
			if (board[i][j] == ' ')
				return 0;
		}
	}
	return 1;
}


char IsWin(char board[ROW][COL])
{
	int i = 0;
	for (i = 0; i < ROW; i++)
	{
		if (board[i][0] == board[i][1] && board[i][1] == board[i][2] && board[i][0] != ' ')
		{
			return board[i][0];
		}
	}
	for (i = 0; i < COL; i++)
	{
		if (board[0][i] == board[1][i] && board[1][i] == board[2][i] && board[0][i] != ' ')
		{
			return board[0][i];
		}
	}
	if (board[0][0] == board[1][1] && board[1][1] == board[2][2] && board[0][0] != ' ')
		return board[0][0];
	if (board[0][2] == board[1][1] && board[1][1] == board[2][0] && board[0][2] != ' ')
		return board[0][2];
	if (IsFull(board) == 1)
		return 'q';
	return 'c';
}

//test.c
#define _CRT_SECURE_NO_WARNINGS 1
#include"game.h"
void menu()
{
	printf("*****************************************\n");
	printf("********   1.play       0.exit   ********\n");
	printf("*****************************************\n");
}
void game()
{
	char board[ROW][COL] = { 0 };
	InitBoard(board);
	DisplayBoard(board);
	char ret = 0;
	while (1)
	{
		PlayerMove(board);
		DisplayBoard(board);
		ret = IsWin(board);
		if (ret != 'c')
			break;
		printf("电脑下：\n");
		ComputerMove(board);
		DisplayBoard(board);
		ret = IsWin(board);
		if (ret != 'c')
			break;
	}
	if (ret == 'O')
		printf("玩家赢！！！\n");
	else if(ret == 'X')
		printf("电脑赢！！！\n");
	else
		printf("平局\n");
}
int main()
{
	int input = 0;
	srand((unsigned int)time(NULL));
	do
	{
		menu();
		printf("请选择:>");
		scanf("%d", &input);
		switch (input)
		{
		case 1:
			game();
			break;
		case 0:
			printf("退出游戏\n");
			break;
		default:
			printf("选择错误，重新选择！\n");
			break;
		}
	} while (input);
	return 0;
}
