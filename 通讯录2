//contact.h
#pragma once
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<assert.h>
#include<stdlib.h>
#include<string.h>
#define NAME_MAX 10
#define SEX_MAX 6
#define ADDR_MAX 20
#define TELE_MAX 12
#define N 3
#define INC 2

typedef struct people
{
	char name[NAME_MAX];
	char sex[SEX_MAX];
	int age;
	char tele[TELE_MAX];
	char addr[ADDR_MAX];

}peo;

typedef struct Contact
{
	peo* data;
	int capacity;
	int sz;
}Con;

enum
{
	EXIT,
	ADD,
	DEL,
	MOD,
	SEARCH,
	SHOW,
	DISTORY,
	QSORT
};

void InitCon(Con* cont);

void add(Con* cont);

void show(const Con* cont);

int FindName(const Con* cont, const char* name);

void del(Con* cont);

void mod(Con* cont);

void sel(const Con* cont);

void Distory(Con* cont);

int cmp_stu_by_name(const void* p1, const void* p2);

void DistoryCon(Con* cont);

//contact.c

#include "contact.h"

void InitCon(Con* cont)
{
	assert(cont);
	cont->data = (peo*)malloc(N * sizeof(peo));
	if (cont->data == NULL)
	{
		perror("malloc");
		return;
	}
	cont->sz = 0;
	cont->capacity = N;
}

int CheckCapacity(Con* cont)
{
	if (cont->sz == cont->capacity)
	{
		peo* tmp = (peo*)realloc(cont->data, (cont->capacity + INC) * sizeof(peo));
		if (tmp == NULL)
		{
			perror("relloc");
			return 0;
		}
		else
		{
			cont->data = tmp;
			cont->capacity += INC;
			printf("增容成功");
			return 1;
		}
	}
	return 1;
}

void add(Con* cont)
{
	assert(cont);
	if (0 == CheckCapacity(cont))
		return;
		
	printf("请输入要添加联系人的信息:\n");
	printf("请输入姓名:");
	scanf("%s", cont->data[cont->sz].name);
	printf("请输入性别:");
	scanf("%s", cont->data[cont->sz].sex);
	printf("请输入年龄:");
	scanf("%d", &cont->data[cont->sz].age);
	printf("请输入电话:");
	scanf("%s", cont->data[cont->sz].tele);
	printf("请输入地址:");
	scanf("%s", cont->data[cont->sz].addr);
	cont->sz++;
	printf("添加成功\n");
}


void show(const Con* cont)
{
	assert(cont);
	int i = 0;
	printf("				通讯录\n");
	printf("	+---------------------------------------------------------------+\n");
	printf("	|姓名		性别	年龄	电话		地址		|\n");
	for (i = 0; i < cont->sz; i++)
	{
		printf("	|%-10s	%-5s	%-5d	%-11s	%-15s |\n", cont->data[i].name, cont->data[i].sex, cont->data[i].age, cont->data[i].tele, cont->data[i].addr);
	}
	printf("	+---------------------------------------------------------------+\n");
}


int FindName(const Con* cont, const char* name)//查找人函数
{
	assert(cont && name);//防止传入空指针
	int i = 0;
	for (i = 0; i < cont->sz; i++)
	{
		if (!strcmp(cont->data[i].name, name))//查找通讯录是否有这个名字
		{
			return i;//有就返回下标
		}
	}
	return -1;//没有返回一个负数.
}

void del(Con* cont)//删除联系人函数
{
	assert(cont);//防止传入空指针
	int i = 0;
	char name[NAME_MAX];
	printf("请输入需要删除的联系人的姓名:\n");
	scanf("%s", name);
	i = FindName(cont, name);
	if (i == -1)
	{
		printf("通讯录中没有该联系人,删除失败\n");
		return;
	}
	for (; i < cont->sz - 1; i++)//注意这里sz要-1,因为下面用到了i+1下标
	{
		cont->data[i] = cont->data[i + 1];
	}
	cont->sz--;
	printf("删除成功,姓名为%s的联系人已删除\n", name);
}


void mod(Con* cont)//修改联系人函数
{
	assert(cont);//防止传入空指针
	int ret = 0;
	char name[NAME_MAX];
	printf("请输入要修改的联系人的姓名:\n");
	scanf("%s", name);
	ret = FindName(cont, name);
	if (ret == -1)
	{
		printf("通讯录中没有该联系人,修改失败\n");
		return;
	}
	printf("请输入修改后联系人的信息:\n");
	printf("请输入姓名:");
	scanf("%s", cont->data[ret].name);
	printf("请输入性别:");
	scanf("%s", cont->data[ret].sex);
	printf("请输入年龄:");
	scanf("%d", &cont->data[ret].age);
	printf("请输入电话:");
	scanf("%s", cont->data[ret].tele);
	printf("请输入地址:");
	scanf("%s", cont->data[ret].addr);
	printf("修改成功.\n");
}


void sel(const Con* cont)//查询联系人函数
{

	char name[NAME_MAX];
	printf("请输入要查询的联系人的名字:\n");
	scanf("%s", name);
	int ret = FindName(cont, name);
	if (ret == -1)
	{
		printf("通讯录中没有该联系人,查询失败.\n");
		return;
	}
	printf("查询成功,该联系信息如下:\n");
	printf("	+---------------------------------------------------------------+\n");
	printf("	|姓名		性别	年龄	电话		地址		|\n");
	printf("	|%-10s	%-5s	%-5d	%-11s	%-15s |\n", cont->data[ret].name, cont->data[ret].sex, cont->data[ret].age, cont->data[ret].tele, cont->data[ret].addr);
	printf("	+---------------------------------------------------------------+\n");
}

void Distory(Con* cont)
{
	assert(cont);
	cont->sz = 0;
	printf("全部联系人删除成功!\n");
}

int cmp_stu_by_name(const void* p1, const void* p2)
{
	return strcmp(((peo*)p1)->name, ((peo*)p2)->name);
}

void DistoryCon(Con* cont)
{
	free(cont->data);
	cont->data = NULL;
	cont->capacity = 0;
	cont->sz = 0;
}

//main.c

#include"contact.h"

void menu()
{
	printf("\n				欢迎使用通讯录:\n");
	printf("	+-------------------------------------------------------------+\n");
	printf("	|	1.添加联系人			2.删除联系人	      |\n");
	printf("	|	3.修改联系人			4.查询联系人	      |\n");
	printf("	|	5.展示通讯录			6.删除全部联系人      |\n");
	printf("	|	7.排序联系人		        0.退出通讯录	      |\n");
	printf("	+-------------------------------------------------------------+\n");
	printf("请选择:");
}
int main()
{
	int input = 0;
	Con cont;
	InitCon(&cont);
	while (1) {
		do
		{
			menu();

			scanf("%d", &input);
			switch (input)
			{
			case EXIT:
				DistoryCon(&cont);
				printf("退出通讯录");
				break;
			case ADD:
				add(&cont);
				break;
			case DEL:
				del(&cont);
				break;
			case MOD:
				mod(&cont);
				break;
			case SEARCH:
				sel(&cont);
				break;
			case SHOW:
				show(&cont);
				break;
			case DISTORY:
				Distory(&cont);
				break;
			case QSORT:
				qsort(cont.data, cont.sz, sizeof(peo), cmp_stu_by_name);
				printf("排序成功\n");
				break;
			default:
				printf("输入错误");
				break;
			}
		} while (input);
		break;
	}
	
	return 0;
}

